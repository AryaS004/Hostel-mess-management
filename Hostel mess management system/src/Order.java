
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Anju
 */
public class Order extends JFrame {

    /**
     * Creates new form Order
     */
    public Order() {
        initComponents();
        updateDayOptions(); // Initially update day options
        updateTimeOptions(); // Initially update time options
        startTimer(); // Start timer for periodic updates
    }

    private void startTimer() {
        // Create a timer that fires an event every hour (adjust interval as needed)
        Timer timer = new Timer(3600000, new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                updateDayOptions();
                updateTimeOptions();
            }
        });
        // Start the timer
        timer.start();
    }

    private void updateDayOptions() {
        // Get the current day of the week
        int dayOfWeek = Calendar.getInstance().get(Calendar.DAY_OF_WEEK);

        // Clear existing options
        day.removeAllItems();

        // Add new options based on the current day of the week
        switch (dayOfWeek) {
            case Calendar.SUNDAY:
                day.addItem("Sunday");
                break;
            case Calendar.MONDAY:
                day.addItem("Monday");
                break;
            case Calendar.TUESDAY:
                day.addItem("Tuesday");
                break;
            case Calendar.WEDNESDAY:
                day.addItem("Wednesday");
                break;
            case Calendar.THURSDAY:
                day.addItem("Thursday");
                break;
            case Calendar.FRIDAY:
                day.addItem("Friday");
                break;
            case Calendar.SATURDAY:
                day.addItem("Saturday");
                break;
            default:
                break;
        }
    }

    private void updateTimeOptions() {
        // Get the current time
        int hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);

        // Clear existing options
        type.removeAllItems();

        // Add new options based on the current time of day
        if (hour >= 8 && hour < 11) {
            type.addItem("Breakfast");
        } else if (hour >= 11 && hour < 16) {
            type.addItem("Lunch");
        } else if (hour >= 16 && hour < 21) {
            type.addItem("Dinner");
        }
    }
    private void insertOrder(int hostelerID,int foodID, int quantity) throws Exception {
        // Constants for fixed food rate
        double foodRate = 20; // Update with your fixed food rate

        // Calculate the food price
        double foodPrice = quantity * foodRate;

        // Establish a connection to your database (update the connection URL, username, and password)
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hostel", "root", "aryasql")) {
            // Define the SQL query to insert the order
            String query = "INSERT INTO orders (HostelerID,FoodID,Quantity,AttendanceStatus, food_price) VALUES (?,?,?,?,?)";

            // Create a PreparedStatement object and set the parameters
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setInt(1, hostelerID);
                statement.setInt(2, foodID);
                statement.setDouble(3, quantity);
                statement.setString(4,"Present");
                statement.setDouble(5, foodPrice);

                // Execute the query
                statement.executeUpdate();
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        day = new javax.swing.JComboBox<>();
        type = new javax.swing.JComboBox<>();
        attendence = new javax.swing.JCheckBox();
        category = new javax.swing.JComboBox<>();
        quantity = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        orderButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        hostelid = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stopp.png"))); // NOI18N
        jButton2.setBorder(null);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 10, 30, 30));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("SimSun-ExtB", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ORDER YOUR FOOD");
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-24, 0, 630, 54));

        jLabel2.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        jLabel2.setText("DAY :");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(99, 95, 107, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        jLabel3.setText("TYPE :");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(99, 177, 107, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        jLabel4.setText("CATEGORY :");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(99, 259, 107, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        jLabel6.setText("QUANTITY :");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 370, 107, -1));

        day.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" }));
        getContentPane().add(day, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 100, 269, -1));

        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BREAKFAST", "LUNCH", "DINNER" }));
        getContentPane().add(type, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 180, 269, -1));

        attendence.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        attendence.setText("ATTENDENCE");
        attendence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attendenceActionPerformed(evt);
            }
        });
        getContentPane().add(attendence, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 430, 160, -1));

        category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vegetarian", "Non-Vegetarian" }));
        getContentPane().add(category, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 260, 269, -1));
        getContentPane().add(quantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 370, 280, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        jLabel5.setText("HOSTEL ID :");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 320, 110, -1));

        orderButton.setBackground(new java.awt.Color(204, 0, 0));
        orderButton.setFont(new java.awt.Font("Yu Gothic Medium", 1, 18)); // NOI18N
        orderButton.setForeground(new java.awt.Color(255, 255, 255));
        orderButton.setText("ORDER");
        orderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderButtonActionPerformed(evt);
            }
        });
        getContentPane().add(orderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 510, 130, -1));
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 60, 37, -1));
        getContentPane().add(hostelid, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 320, 270, -1));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/download (7).jpeg"))); // NOI18N
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -270, 600, 1010));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int yes=JOptionPane.showConfirmDialog(this,"Are you sure?","Close",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(yes==JOptionPane.YES_OPTION)
             new Homepage().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void attendenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attendenceActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_attendenceActionPerformed

    private void orderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderButtonActionPerformed
        // TODO add your handling code here:
        if (day.getSelectedItem() == null || type.getSelectedItem() == null || category.getSelectedItem() == null || quantity.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select day, type, and category, and enter quantity.");
        } else {
            // Get selected values from ComboBoxes
            String selectedDay = day.getSelectedItem().toString();
            String selectedType = type.getSelectedItem().toString();
            String selectedCategory = category.getSelectedItem().toString();
            int selectedQuantity = Integer.parseInt(quantity.getText());
            int selecthostelid=Integer.parseInt(hostelid.getText());
            Connection con = null;
            PreparedStatement pat = null;
            ResultSet rs = null;
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost:3306/hostel", "root", "aryasql");

                // Retrieve FoodID from food table based on selected values
                pat = con.prepareStatement("SELECT FoodID FROM food WHERE DayOfWeek=? AND TimeOfDay=? AND Category=?");
                pat.setString(1, selectedDay);
                pat.setString(2, selectedType);
                pat.setString(3, selectedCategory);
                rs = pat.executeQuery();

                if (rs.next()) {
                    int foodID = rs.getInt("FoodID");

                    try {
                        // Assuming you have the hostelID available (retrieve it as per your application logic)
                        // Replace with the actual hostelID
                        
                        // Insert into the order table

                        insertOrder(selecthostelid, foodID, selectedQuantity);
                    } catch (Exception ex) {
                        Logger.getLogger(Order.class.getName()).log(Level.SEVERE, null, ex);
                    }


                    JOptionPane.showMessageDialog(this, "Order placed successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "No food item found for the selected day, type, and category.");
                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
                ex.printStackTrace(); // Print the stack trace for debugging
            } finally {
                try {
                    if (rs != null) rs.close();
                    if (pat != null) pat.close();
                    if (con != null) con.close();
                } catch (SQLException ex) {
                    ex.printStackTrace(); // Print the stack trace for debugging
                }
            }
        }

    }//GEN-LAST:event_orderButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Order().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox attendence;
    private javax.swing.JComboBox<String> category;
    private javax.swing.JComboBox<String> day;
    private javax.swing.JTextField hostelid;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton orderButton;
    private javax.swing.JTextField quantity;
    private javax.swing.JComboBox<String> type;
    // End of variables declaration//GEN-END:variables
}
